import React, { useState } from 'react';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import axios from 'axios';

const AddPriceList = () => {
  const [date, setDate] = useState('');
  const [tabValue, setTabValue] = useState('one');
  // State to manage inputs
  const [inputs, setInputs] = useState({
    // Tab 1 - Standard Price
    chips_11mm_unwashed: '',
    chips_11mm_washed: '',
    chips_9mm_unwashed: '',
    chips_9mm_washed: '',
    chips_7mm_unwashed: '',
    chips_7mm_washed: '',
    cocopeat_hi_ec: '',
    cocopeat_low_ec: '',
    // Tab 2 - Wastage deduction for chip
    wastage_deduction_chips: Array(13).fill(''),
    // Tab 3 - Density and Sand
    density: Array(12).fill(''),
    sand: Array(7).fill(''),
    // Tab 4 - Wastage Price
    wastage_price: [
      { label: 'Cocopeat Fiber', value: '' },
      { label: 'Cocopeat Fine Dust', value: '' },
      { label: '10C Sieved', value: '' },
      { label: '10C not Sieved', value: '' },
      { label: '10C upper part', value: '' }
    ]
  });

  const handleDateChange = (e) => {
    setDate(e.target.value);
  };

  const handleChangeTab = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleInputChange = (key, value) => {
    setInputs({ ...inputs, [key]: value });
  };

  const handleArrayInputChange = (key, index, value) => {
    const newArray = [...inputs[key]];
    newArray[index] = value;
    setInputs({ ...inputs, [key]: newArray });
  };

  const handleObjectInputChange = (key, index, value) => {
    const newArray = [...inputs[key]];
    newArray[index] = { ...newArray[index], value: value };
    setInputs({ ...inputs, [key]: newArray });
  };

  const handleNextTab = () => {
    if (tabValue !== 'four') {
      const tabs = ['one', 'two', 'three', 'four'];
      const currentIndex = tabs.indexOf(tabValue);
      setTabValue(tabs[currentIndex + 1]);
    }
  };

  const handleFinish = async () => {
    try {
      // Send data to backend
      const response = await axios.post("http://localhost:3001/auth/test", { date, ...inputs, employee_id: '0000' });
      console.log(response.data); // Log response from backend
      // Reset inputs and date after successful submission
      setInputs({
        chips_11mm_unwashed: '',
        chips_11mm_washed: '',
        chips_9mm_unwashed: '',
        chips_9mm_washed: '',
        chips_7mm_unwashed: '',
        chips_7mm_washed: '',
        cocopeat_hi_ec: '',
        cocopeat_low_ec: '',
        wastage_deduction_chips: Array(13).fill(''),
        density: Array(12).fill(''),
        sand: Array(7).fill(''),
        wastage_price: [
          { label: 'Cocopeat Fiber', value: '' },
          { label: 'Cocopeat Fine Dust', value: '' },
          { label: '10C Sieved', value: '' },
          { label: '10C not Sieved', value: '' },
          { label: '10C upper part', value: '' }
        ]
      });
      setDate('');
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className='bg-white h-full'>
      <div className="container mx-auto py-8">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-3xl font-bold">Weekly Price List</h1>
          <div className="flex items-center">
            <label htmlFor="date" className="mr-2">Date:</label>
            <input
              type="date"
              id="date"
              value={date}
              onChange={handleDateChange}
              className="border border-gray-300 rounded px-3 py-2"
            />
          </div>
        </div>
        <Box sx={{ width: '100%' }}>
          <Tabs
            value={tabValue}
            onChange={handleChangeTab}
            aria-label="wrapped label tabs example"
          >
            <Tab value="one" label="Standard Price" />
            <Tab value="two" label="Deduction of Chips" />
            <Tab value="three" label="Deduction of Cocopeat" />
            <Tab value="four" label="Wastage Price" />
          </Tabs>
        </Box>

        {/* Tab 1 - Standard Price */}
        <div value="one" hidden={tabValue !== 'one'}>
          <div className="mb-8">
            {/* Chips Subsection */}
            <h2 className="text-xl font-semibold mb-4">Chips</h2>
            <div className="grid grid-cols-2 gap-4">
              {/* Each TextField is connected to the respective property in the inputs object */}
              <TextField
                label="11mm Unwashed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_11mm_unwashed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_11mm_unwashed', e.target.value)} // Handle input change
              />
                  <TextField
                label="11mm washed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_11mm_washed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_11mm_washed', e.target.value)} // Handle input change
              />
             <TextField
                label="9mm Unwashed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_9mm_unwashed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_9mm_unwashed', e.target.value)} // Handle input change
              />
              <TextField
                label="9mm washed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_9mm_washed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_9mm_washed', e.target.value)} // Handle input change
              />
                <TextField
                label="7mm Unwashed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_7mm_unwashed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_7mm_unwashed', e.target.value)} // Handle input change
              />
              <TextField
                label="7mm washed"
                variant="outlined"
                fullWidth
                sx={{ maxWidth: '500px' }}
                InputProps={{ endAdornment: <span>LKR</span> }}
                value={inputs.chips_7mm_washed} // Use value from inputs object
                onChange={(e) => handleInputChange('chips_7mm_washed', e.target.value)} // Handle input change
              />
              {/* Add other input fields similarly */}
            </div>
          </div>
          {/* Add Cocopeat Subsection similarly */}
                    <div className="mb-8">
              {/* Cocopeat Subsection */}
              <h2 className="text-xl font-semibold mb-4">Cocopeat</h2>
              <div className="grid grid-cols-2 gap-4">
                {/* Each TextField is connected to the respective property in the inputs object */}
                <TextField
                  label="HI EC"
                  variant="outlined"
                  fullWidth
                  sx={{ maxWidth: '500px' }}
                  InputProps={{ endAdornment: <span>LKR</span> }}
                  value={inputs.cocopeat_hi_ec} // Use value from inputs object
                  onChange={(e) => handleInputChange('cocopeat_hi_ec', e.target.value)} // Handle input change
                />
                  <TextField
                  label="Low EC"
                  variant="outlined"
                  fullWidth
                  sx={{ maxWidth: '500px' }}
                  InputProps={{ endAdornment: <span>LKR</span> }}
                  value={inputs.cocopeat_low_ec} // Use value from inputs object
                  onChange={(e) => handleInputChange('cocopeat_low_ec', e.target.value)} // Handle input change
                />
                {/* Add other input fields similarly */}
              </div>
            </div>
        </div>

        {/* Tab 2 - Wastage deduction for chip */}
        {/* Add Tab 2 content similarly */}               
          <div value="two" hidden={tabValue !== 'two'}>
            <div className="mb-8">
              {/* Wastage deduction for chip */}
              <h2 className="text-xl font-semibold mb-4">Wastage deduction for chip</h2>
              <div className="grid grid-cols-2 gap-4">
                {/* Iterate over inputs array to generate input fields */}
                {inputs.wastage_deduction_chips.map((percentage, index) => (
                  <TextField
                    key={index}
                    label={`${percentage}%`}
                    variant="outlined"
                    fullWidth
                    sx={{ maxWidth: '500px' }}
                    InputProps={{ endAdornment: <span>LKR</span> }}
                    value={percentage} // Use value from inputs array
                    onChange={(e) => handleArrayInputChange('wastage_deduction_chips', index, e.target.value)} // Handle input change for array
                  />
                ))}
              </div>
            </div>
          </div>


        {/* Tab 3 - Density and Sand */}
        {/* Add Tab 3 content similarly */}

        {/* Tab 4 - Wastage Price */}
        {/* Add Tab 4 content similarly */}

        <div className="fixed right-20 bottom-20">
          {tabValue !== 'four' ? (
            <Button
              variant="contained"
              onClick={handleNextTab}
              color="primary"
              size="large" /* Add size="large" to scale up the button */
            >
              Next
            </Button>
          ) : (
            <Button
              variant="contained"
              color="success"
              size="large" /* Add size="large" to scale up the button */
              onClick={handleFinish} /* Handle a different function when it changes to "Finish" */
            >
              Finish
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddPriceList;



















(?, 
    ?,
     ?,
      ?,
       ?,
        ?,
         ?,
          ?,
           ?,
            ?,
             ?,
              ?,
               ?,
                ?,
                 ?,
                  ?,
                   ?
                   , ?
                   , ?
                   , ?,
                    ?,
                     ?,
                      ?,
                       ?,
                        ?,
                         ?,
                          ?,
                           ?,
                            ?,
                             ?,
                              ?,
                               ?,
                                ?,
                                 ?,
                                  ?,
                                   ?,
                                    ?,
                                     ?,
                                      ?,
                                       ?,
                                        ?,
                                         ?
                                         , ?
                                         , ?)`;
