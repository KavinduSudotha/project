import * as React from "react";
import { usePageName } from "../context/PageNameContext";
import { styled, useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import MuiDrawer from "@mui/material/Drawer";
import MuiAppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import LogoutIcon from "@mui/icons-material/Logout";
import Badge from "@mui/material/Badge";
import MenuItem from "@mui/material/MenuItem";
import Menu from "@mui/material/Menu";
import AccountCircle from "@mui/icons-material/AccountCircle";
import NotificationsIcon from "@mui/icons-material/Notifications";
import MoreIcon from "@mui/icons-material/MoreVert";
import ContentPasteIcon from "@mui/icons-material/ContentPaste";
import HomeIcon from "@mui/icons-material/Home";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import FileUploadIcon from "@mui/icons-material/FileUpload";
import DeleteIcon from "@mui/icons-material/Delete";
import DeleteSweepIcon from "@mui/icons-material/DeleteSweep";
import AddchartIcon from "@mui/icons-material/Addchart";
import WorkHistoryIcon from "@mui/icons-material/WorkHistory";
import TextSnippetIcon from "@mui/icons-material/TextSnippet";
import SupervisorAccountIcon from "@mui/icons-material/SupervisorAccount";
import jwtDecode from "jwt-decode";
import { useState } from "react";
import ProfileDialog from './ProfileDialog';

const drawerWidth = 240; // Setting the drawer width
const StyledToolbar = styled(Toolbar)(({ theme }) => ({
  alignItems: "flex-start",
  paddingTop: theme.spacing(1),
  paddingBottom: theme.spacing(1),
  "@media all": {
    minHeight: 64,
  },
}));

const handleLogout = () => {
  console.log("Logging out...");

  // Clear the local storage
  localStorage.removeItem("token");
  console.log("Token removed from localStorage");

  // Redirect to the login page or any other page
  window.location.href = "/";
  console.log("Redirecting to /");
};

// Mixin for opened drawer
const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: "hidden",
});

// Mixin for closed drawer
const closedMixin = (theme) => ({
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: "hidden",
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up("sm")]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
});

// Drawer header styling
const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  ...theme.mixins.toolbar,
}));

// AppBar styling
const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

// Drawer styling
const Drawer = styled(MuiDrawer, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  width: drawerWidth,
  flexShrink: 0,
  whiteSpace: "nowrap",
  boxSizing: "border-box",
  ...(open && {
    ...openedMixin(theme),
    "& .MuiDrawer-paper": openedMixin(theme),
  }),
  ...(!open && {
    ...closedMixin(theme),
    "& .MuiDrawer-paper": closedMixin(theme),
  }),
}));

const Main = styled("main", { shouldForwardProp: (prop) => prop !== "open" })(
  ({ theme, open }) => ({
    flexGrow: 1,
    padding: theme.spacing(3),
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: `-${drawerWidth}px`,
    ...(open && {
      transition: theme.transitions.create("margin", {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      marginLeft: 0,
    }),
  })
);

// Main component function
export default function MiniDrawer() {
  const theme = useTheme(); // Hook to use the theme
  const [open, setOpen] = React.useState(false); // State to manage drawer open/close
  const { pageName } = usePageName(); // Accessing pageName from context

  const handleDrawerOpen = () => {
    setOpen(true); // Function to open the drawer
  };

  const handleDrawerClose = () => {
    setOpen(false); // Function to close the drawer
  };

  let menuItems = [];

  // Menu items data
  const storedData = localStorage.getItem("token");
  let UserType = "";
  let userId = null; // Declare userId variable
  if (storedData) {
    const parsedData = JSON.parse(storedData);
    const decodedToken = jwtDecode(parsedData.token);
    UserType = decodedToken.role;
    userId = decodedToken.userid; // Extract userId from the token
  }
  switch (UserType) {
    case "Director":
      menuItems = [
        { name: "Home", icon: HomeIcon, link: "/director-dashboard" },
        {
          name: "Price List",
          icon: ContentPasteIcon,
          link: "/director-dashboard/pricelist",
        },
        {
          name: "Buy RAW",
          icon: FileDownloadIcon,
          link: "/director-dashboard/buyraw",
        },
        {
          name: "Use RAW",
          icon: FileUploadIcon,
          link: "/director-dashboard/rawuse",
        },
        {
          name: "Add wastage",
          icon: DeleteIcon,
          link: "/director-dashboard/addwastagepage",
        },
        {
          name: "Sell wastage",
          icon: DeleteSweepIcon,
          link: "/director-dashboard/sellwastagepage",
        },
        {
          name: "Inventory",
          icon: AddchartIcon,
          link: "/director-dashboard/inventory",
        },
        {
          name: "Jobs",
          icon: WorkHistoryIcon,
          link: "/director-dashboard/updatejob",
        },
        {
          name: "Admins",
          icon: SupervisorAccountIcon,
          link: "/director-dashboard/admin",
        },
        { name: "Logout", icon: LogoutIcon, action: handleLogout }, // Added logout item
      ];
      break;
    case "Manager":
      menuItems = [
        { name: "Home", icon: HomeIcon, link: "/Manager-dashboard" },
        {
          name: "Price List",
          icon: ContentPasteIcon,
          link: "/Manager-dashboard/pricelist",
        },
        {
          name: "Buy RAW",
          icon: FileDownloadIcon,
          link: "/Manager-dashboard/buyraw",
        },
        {
          name: "Use RAW",
          icon: FileUploadIcon,
          link: "/Manager-dashboard/rawuse",
        },
        {
          name: "Add wastage",
          icon: DeleteIcon,
          link: "/Manager-dashboard/addwastagepage",
        },
        {
          name: "Sell wastage",
          icon: DeleteSweepIcon,
          link: "/Manager-dashboard/sellwastagepage",
        },
        {
          name: "Inventory",
          icon: AddchartIcon,
          link: "/Manager-dashboard/inventory",
        },
        {
          name: "Jobs",
          icon: WorkHistoryIcon,
          link: "/Manager-dashboard/updatejob",
        },
        { name: "Logout", icon: LogoutIcon, action: handleLogout }, // Added logout item
      ];
      break;
    case "Employee":
      menuItems = [
        { name: "Home", icon: HomeIcon, link: "/Employee-dashboard" },
        {
          name: "Price List",
          icon: ContentPasteIcon,
          link: "/Employee-dashboard/pricelist",
        },
        {
          name: "Buy RAW",
          icon: FileDownloadIcon,
          link: "/Employee-dashboard/buyraw",
        },
        {
          name: "Use RAW",
          icon: FileUploadIcon,
          link: "/Employee-dashboard/rawuse",
        },
        {
          name: "Add wastage",
          icon: DeleteIcon,
          link: "/Employee-dashboard/addwastagepage",
        },
        {
          name: "Sell wastage",
          icon: DeleteSweepIcon,
          link: "/Employee-dashboard/sellwastagepage",
        },
        {
          name: "Inventory",
          icon: AddchartIcon,
          link: "/Employee-dashboard/inventory",
        },
        {
          name: "Jobs",
          icon: WorkHistoryIcon,
          link: "/Employee-dashboard/updatejob",
        },
        { name: "Logout", icon: LogoutIcon, action: handleLogout }, // Added logout item
      ];
      break;
    default:
      menuItems = [];
      break;
  }

  // State variables for managing menu and mobile menu
  const [anchorEl, setAnchorEl] = useState(null);
  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = useState(null);
  const isMenuOpen = Boolean(anchorEl);
  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);
  const [openProfileDialog, setOpenProfileDialog] = useState(false);

  const handleProfileDialogOpen = () => {
    setOpenProfileDialog(true);
  };

  const handleProfileDialogClose = () => {
    setOpenProfileDialog(false);
  };

  // Function to handle profile menu close
  const handleMenuClose = () => {
    setAnchorEl(null);
    handleMobileMenuClose();
  };

  // Function to handle mobile menu close
  const handleMobileMenuClose = () => {
    setMobileMoreAnchorEl(null);
  };

  // Function to handle profile menu open
  const handleProfileMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  // Function to handle mobile menu open
  const handleMobileMenuOpen = (event) => {
    setMobileMoreAnchorEl(event.currentTarget);
  };

  // Render the menu items dynamically
  const drawerItems = menuItems.map((item, index) => (
    <ListItem
      key={index}
      disablePadding
      onClick={item.action ? item.action : () => { window.location.href = item.link; }}
    >
      <ListItemButton>
        <ListItemIcon>
          <item.icon />
        </ListItemIcon>
        <ListItemText primary={item.name} />
      </ListItemButton>
    </ListItem>
  ));

  return (
    <Box sx={{ display: "flex" }}>
      <CssBaseline />
      <AppBar position="fixed" open={open}>
        <StyledToolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerOpen}
            edge="start"
            sx={{
              marginRight: 5,
              ...(open && { display: "none" }),
            }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div">
            {pageName}
          </Typography>
          <Box sx={{ flexGrow: 1 }} />
          <Box sx={{ display: { xs: "none", md: "flex" } }}>
            <IconButton
              size="large"
              aria-label="show new notifications"
              color="inherit"
            >
              <Badge badgeContent={17} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            <IconButton
              size="large"
              edge="end"
              aria-label="account of current user"
              aria-haspopup="true"
              onClick={handleProfileMenuOpen}
              color="inherit"
            >
              <AccountCircle />
            </IconButton>
          </Box>
          <Box sx={{ display: { xs: "flex", md: "none" } }}>
            <IconButton
              size="large"
              aria-label="show more"
              aria-controls="primary-search-account-menu-mobile"
              aria-haspopup="true"
              onClick={handleMobileMenuOpen}
              color="inherit"
            >
              <MoreIcon />
            </IconButton>
          </Box>
        </StyledToolbar>
      </AppBar>
      <Drawer variant="permanent" open={open}>
        <DrawerHeader>
          <IconButton onClick={handleDrawerClose}>
            {theme.direction === "rtl" ? (
              <ChevronRightIcon />
            ) : (
              <ChevronLeftIcon />
            )}
          </IconButton>
        </DrawerHeader>
        <Divider />
        <List>{drawerItems}</List>
      </Drawer>
      <Main open={open}>
        <DrawerHeader />
        <Typography paragraph>Page content goes here...</Typography>
      </Main>
      <Menu
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: "top",
          horizontal: "right",
        }}
        keepMounted
        transformOrigin={{
          vertical: "top",
          horizontal: "right",
        }}
        open={isMenuOpen}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleProfileDialogOpen}>Profile</MenuItem>
        <MenuItem onClick={handleLogout}>Logout</MenuItem> {/* Add Logout MenuItem */}
      </Menu>
      <ProfileDialog
        open={openProfileDialog}
        onClose={handleProfileDialogClose}
      />
    </Box>
  );
}
